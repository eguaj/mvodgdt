#!/bin/bash

set -e
shopt -s nullglob

function usage {
    echo ""
    echo "Usage:"
    echo ""
    echo "  export PUBRULE=/path/to/pubrule/dir"
    echo "  $(basename $0) <archive_prefix> [<tree-or-commit>]"
    echo ""
}

if [ ! -d "buildTools" ]; then
    if [ -z "$PUBRULE" ]; then
	echo "Empty PUBRULE env var!"
	usage
	exit 1
    fi
    if [ ! -f "$PUBRULE/PubRule" ]; then
	echo "Could not find 'PubRule' un '$PUBRULE'!"
	usage
	exit 1
    fi
fi

GZIP="--fast"
export GZIP
GZIP_ENV=$GZIP
export GZIP_ENV

ARCHIVE_PREFIX=$1
ARCHIVE_TREE=$2
MAKEFILE_TARGET=$3
if [ -z "$ARCHIVE_PREFIX" -a -z "$ARCHIVE_TREE" ]; then
    ARCHIVE_PREFIX=$(basename "$PWD")
    ARCHIVE_TREE="HEAD"
    echo -n "Use arguments '$ARCHIVE_PREFIX $ARCHIVE_TREE' [Y/n]? "
    read ANS
    if [ "$ANS" != "" -a "$ANS" != "y" -a "$AND" != "Y" ]; then
	usage
	exit 1
    fi
    echo "Ok, using '$ARCHIVE_PREFIX $ARCHIVE_TREE'!"
fi
if [ -z "$ARCHIVE_PREFIX" ]; then
    echo "Missing <archive_prefix>!"
    usage
    exit 1
fi
if [ -z "$ARCHIVE_TREE" ]; then
    ARCHIVE_TREE="HEAD"
fi

if [ -d "/Volumes/RAM" ]; then
    TMP_DIR=`TMPDIR=/Volumes/RAM mktemp -d -t "$ARCHIVE_PREFIX.XXXXXX"`
else
    TMP_DIR=`TMPDIR=/Volumes/SCM/tmp mktemp -d -t "$ARCHIVE_PREFIX.XXXXXX"`
fi

ORIG_DIR=`pwd`

set +e
git status > /dev/null 2>&1
RET=$?
set -e

if [ $RET -eq 0 ]; then
	git archive --format=tar --prefix="$ARCHIVE_PREFIX/" $ARCHIVE_TREE \
	    | tar -C "$TMP_DIR" -xf -
else
	mkdir "$TMP_DIR/$ARCHIVE_PREFIX"
	tar -cf - . | tar -C "$TMP_DIR/$ARCHIVE_PREFIX" -xf -
fi
if [ -f ".gitmodules" -a "$(grep -c \"buildTools\" .gitmodules)" = "1" ]; then
    tar -C buildTools -cf - . | tar -C "$TMP_DIR/$ARCHIVE_PREFIX/buildTools" -xf -
    # git clone /Volumes/SCM/git/anakeen/dynacase-buildtools buildTools || git clone git@github.com:Anakeen/dynacase-buildtools.git buildTools
fi

if [ -n "$DEPLOY_PATCHES" -a -d "deploy-patches" ]; then
	for PATCH in deploy-patches/*.diff; do
		echo "Applying patch '$PATCH'..."
		(cd "$TMP_DIR/$ARCHIVE_PREFIX" && patch -p1) < "$PATCH"
	done
fi

if [ -f "VERSION.local" ]; then
    find "$TMP_DIR/$ARCHIVE_PREFIX" -type f -name "VERSION" | while read VF; do
	echo "Copying VERSION.local into '$VF'..."
	cp VERSION.local "$VF"
    done
fi
if [ -f "RELEASE.local" ]; then
    find "$TMP_DIR/$ARCHIVE_PREFIX" -type f -name "RELEASE" | while read RF; do
	echo "Copying RELEASE.local into '$RF'..."
	cp RELEASE.local "$RF"
    done
fi

OUT=$(TMPDIR=$TMP_DIR mktemp -t "build.log.XXXXXX")
set +e
(
    set -e
    echo "* Changing directory to '$TMP_DIR/$ARCHIVE_PREFIX'..."
    cd "$TMP_DIR/$ARCHIVE_PREFIX"
    if [ -n "$PRE_BUILD" ]; then
	echo "* Running PRE_BUILD '$PRE_BUILD'..."
	$PRE_BUILD
    fi
#    if [ -f ".gitmodules" -a "$(grep -c \"buildTools\" .gitmodules)" = "1" ]; then
#	git clone /Volumes/SCM/git/anakeen/dynacase-buildtools buildTools || git clone git@github.com:Anakeen/dynacase-buildtools.git buildTools
#    fi
    echo "* Running 'autoconf'..."
    [ ! -f "./configure" ] && autoconf
    if [ -n "$PUBRULE" ]; then
	echo "* Running './configure--with-pubrule=\"$PUBRULE\"'..."
	./configure --with-pubrule="$PUBRULE"
    else
	echo "* Running './configure..."
	./configure
    fi
    echo "* Running 'make webinst'..."
    if [ -n "$MAKEFILE_TARGET" ]; then
	make "$MAKEFILE_TARGET"
    else
	make webinst-all || make webinst
    fi
    if [ -n "$POST_BUILD" ]; then
	echo "* Running POST_BUILD '$POST_BUILD'..."
	$POST_BUILD
    fi
    echo "* Produced webinst:"
    for WEBINST in *.webinst; do
	echo "  - $WEBINST"
	cp "$WEBINST" "$ORIG_DIR"
    done
    set +e
)# > "$OUT" 2>&1
#) 2>&1 | (pv -l -N "Building webinst" || cat) > "$OUT"
RET=$?
set -e
if [ $RET -ne 0 ]; then
    cat "$OUT"
    exit $RET
fi

rm -Rf "$TMP_DIR"

exit 0

# vim: tabstop=8 softtabstop=4 shiftwidth=4 noexpandtab
