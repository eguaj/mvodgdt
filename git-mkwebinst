#!/bin/bash

set -e
shopt -s nullglob

function usage {
    echo ""
    echo "Usage:"
    echo ""
    echo "  export PUBRULE=/path/to/pubrule/dir"
    echo "  $(basename $0) <archive_prefix> [<tree-or-commit>]"
    echo ""
}

if [ -z "$PUBRULE" ]; then
    echo "Empty PUBRULE env var!"
    usage
    exit 1
fi
if [ ! -f "$PUBRULE/PubRule" ]; then
    echo "Could not find 'PubRule' un '$PUBRULE'!"
    usage
    exit 1
fi

GZIP="--fast"
export GZIP
GZIP_ENV=$GZIP
export GZIP_ENV

ARCHIVE_PREFIX=$1
if [ -z "$ARCHIVE_PREFIX" ]; then
    echo "Missing <archive_prefix>!"
    usage
    exit 1
fi

ARCHIVE_TREE=$2
if [ -z "$ARCHIVE_TREE" ]; then
    ARCHIVE_TREE="HEAD"
fi

TMP_DIR=`mktemp -d -t "$ARCHIVE_PREFIX.XXXXXX"`

ORIG_DIR=`pwd`

set +e
git status > /dev/null 2>&1
RET=$?
set -e

if [ $RET -eq 0 ]; then
	git archive --format=tar --prefix="$ARCHIVE_PREFIX/" $ARCHIVE_TREE \
	    | tar -C "$TMP_DIR" -xf -
else
	mkdir "$TMP_DIR/$ARCHIVE_PREFIX"
	tar -cf - . | tar -C "$TMP_DIR/$ARCHIVE_PREFIX" -xf -
fi

if [ -n "$DEPLOY_PATCHES" -a -d "deploy-patches" ]; then
	for PATCH in deploy-patches/*.diff; do
		echo "Applying patch '$PATCH'..."
		(cd "$TMP_DIR/$ARCHIVE_PREFIX" && patch -p1) < "$PATCH"
	done
fi

if [ -f "VERSION.local" ]; then
    echo "Copying VERSION.local into build dir..."
    cp VERSION.local "$TMP_DIR/$ARCHIVE_PREFIX/VERSION"
fi
if [ -f "RELEASE.local" ]; then
    echo "Copying RELEASE.local into build dir..."
    cp RELEASE.local "$TMP_DIR/$ARCHIVE_PREFIX/RELEASE"
fi

(
    echo "* Changing directory to '$TMP_DIR/$ARCHIVE_PREFIX'..."
    cd "$TMP_DIR/$ARCHIVE_PREFIX"
    echo "* Running 'autoconf'..."
    autoconf
    echo "* Running './configure--with-pubrule=\"$PUBRULE\"'..."
    ./configure --with-pubrule="$PUBRULE"
    echo "* Running 'make webinst'..."
    make webinst
    echo "* Produced webinst:"
    for WEBINST in *.webinst; do
	echo "  - $WEBINST"
	cp "$WEBINST" "$ORIG_DIR"
    done
)
RET=$?
if [ $RET -ne 0 ]; then
    exit $RET
fi

rm -Rf "$TMP_DIR"

exit 0
